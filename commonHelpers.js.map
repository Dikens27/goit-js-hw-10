{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst input = document.querySelector(\"#datetime-picker\");\nconst button = document.querySelector(\"button\");\nconst daysTimer = document.querySelector(\"[data-days]\"); \nconst hoursTimer = document.querySelector(\"[data-hours]\");\nconst minutesTimer = document.querySelector(\"[data-minutes]\");\nconst secondsTimer = document.querySelector(\"[data-seconds]\");\n\nlet userSelectedDate = \"\";\nbutton.setAttribute(\"disabled\", true)\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= options.defaultDate) {\n    iziToast.show({\n      title: 'Please choose a date in the future',\n      titleColor: 'white',\n      color: 'white',\n      backgroundColor: 'red',\n      position: 'topRight',\n    });\n    } else {\n      button.removeAttribute(\"disabled\")\n      userSelectedDate = selectedDates[0];\n    }\n    \n    console.log(selectedDates[0]);\n  }\n   \n}\n\nflatpickr(input, options);\n\n\nfunction pad(value) {\n  return String(value).padStart(2, \"0\");\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = pad(Math.floor(ms / day));\n  const hours = pad(Math.floor((ms % day) / hour));\n  const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n  const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n  return { days, hours, minutes, seconds }\n}\n\n\nbutton.addEventListener('click', () => {\n  const currentDateTime = Date.now();\n  let selectedDateTime = userSelectedDate.getTime();\n\n  const timeInterval = setInterval(() => {\n    selectedDateTime = selectedDateTime - 1000;\n    let different = selectedDateTime - currentDateTime - 1000;\n    \n    if (currentDateTime == selectedDateTime - 1000) {\n      clearInterval(timeInterval);\n    }\n\n    const result = convertMs(different);\n\n    daysTimer.textContent = result.days;\n    hoursTimer.textContent = result.hours;\n    minutesTimer.textContent = result.minutes;\n    secondsTimer.textContent = result.seconds;\n  }, 1000);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"names":["input","button","daysTimer","hoursTimer","minutesTimer","secondsTimer","userSelectedDate","options","selectedDates","iziToast","flatpickr","pad","value","convertMs","ms","days","hours","minutes","seconds","currentDateTime","selectedDateTime","timeInterval","different","result"],"mappings":"2FAKA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAAmB,GACvBL,EAAO,aAAa,WAAY,EAAI,EAEpC,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,IAAMD,EAAQ,YAChCE,EAAS,KAAK,CACZ,MAAO,qCACP,WAAY,QACZ,MAAO,QACP,gBAAiB,MACjB,SAAU,UAChB,CAAK,GAECR,EAAO,gBAAgB,UAAU,EACjCK,EAAmBE,EAAc,IAGnC,QAAQ,IAAIA,EAAc,EAAE,CAC7B,CAEH,EAEAE,EAAUV,EAAOO,CAAO,EAGxB,SAASI,EAAIC,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAOJ,EAAI,KAAK,MAAMG,EAAK,KAAG,CAAC,EAC/BE,EAAQL,EAAI,KAAK,MAAOG,EAAK,MAAO,IAAI,CAAC,EACzCG,EAAUN,EAAI,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,CAAC,EACtDI,EAAUP,EAAI,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,CAAC,EAEvE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC1C,CAGAjB,EAAO,iBAAiB,QAAS,IAAM,CACrC,MAAMkB,EAAkB,KAAK,MAC7B,IAAIC,EAAmBd,EAAiB,UAExC,MAAMe,EAAe,YAAY,IAAM,CACrCD,EAAmBA,EAAmB,IACtC,IAAIE,EAAYF,EAAmBD,EAAkB,IAEjDA,GAAmBC,EAAmB,KACxC,cAAcC,CAAY,EAG5B,MAAME,EAASV,EAAUS,CAAS,EAElCpB,EAAU,YAAcqB,EAAO,KAC/BpB,EAAW,YAAcoB,EAAO,MAChCnB,EAAa,YAAcmB,EAAO,QAClClB,EAAa,YAAckB,EAAO,OACnC,EAAE,GAAI,CACT,CAAC"}